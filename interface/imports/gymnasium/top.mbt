// Generated by `wit-bindgen` 0.30.0. DO NOT EDIT!

pub type Space Int derive(Show, Eq)

pub fn Space::drop(self : Space) -> Unit {
  wasmImportResourceDropSpace(self.0)
}

pub fn Space::reset(self : Space, seed : UInt) -> FixedArray[Double] {
  let return_area = @ffi.malloc(8)
  wasmImportMethodSpaceReset(self.0, seed.to_int(), return_area)
  let result = @ffi.ptr2double_array(@ffi.load32(return_area + 0))
  @ffi.free(return_area)
  return result
}

pub fn Space::step(
  self : Space,
  action : FixedArray[Double]
) -> (FixedArray[Double], Bool) {
  let return_area = @ffi.malloc(12)
  wasmImportMethodSpaceStep(
    self.0,
    @ffi.double_array2ptr(action),
    action.length(),
    return_area,
  )
  let result = @ffi.ptr2double_array(@ffi.load32(return_area + 0))
  ignore(action)
  @ffi.free(return_area)
  return (result, @ffi.load8_u(return_area + 8) != 0)
}

pub fn Space::close(self : Space) -> Unit {
  wasmImportMethodSpaceClose(self.0)
}

pub fn make(name : String) -> Space {
  let result : Int = wasmImportMake(@ffi.str2ptr(name), name.iter().count())
  ignore(name)
  return Space::Space(result)
}
